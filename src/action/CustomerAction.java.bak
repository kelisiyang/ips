package action;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

import javax.enterprise.inject.New;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.websocket.server.ServerApplicationConfig;

import org.apache.struts2.ServletActionContext;

import com.alibaba.fastjson.JSON;
import com.opensymphony.xwork2.ActionSupport;
import com.opensymphony.xwork2.ModelDriven;

import entity.CGCS2000Point;
import entity.ConvertGauss2Geodetic;
import entity.Customer;
import entity.MPoint;
import entity.PageBean;
import entity.xy2BL;
import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import service.CustomerService;

public class CustomerAction extends ActionSupport implements ModelDriven<Customer>{
	private CustomerService customerService;
	private CGCS2000Point cPoint=new CGCS2000Point();
	private ConvertGauss2Geodetic convertGauss2Geodetic=new ConvertGauss2Geodetic();
	private MPoint mPoint=new MPoint();
	
	private Customer customer=new Customer();
	private Integer currentPage;
	private Double x,y,absx,absy,longitude,latitude;
	public Customer getModel() {
		
		return customer;
	}
	public CustomerService getCustomerService() {
		return customerService;
	}
	public void setCustomerService(CustomerService customerService) {
		this.customerService = customerService;
	}
	
	public String toAddPage(){
		return "toAddPage";
	}
	public String add(){
		
		customerService.add(customer);
		return "add";
	}
	public String list(){
		List<Customer> list=customerService.findAll();
		ServletActionContext.getRequest().setAttribute("list", list);
		return "list";
	}

	public String delete(){
		
		int dev_id=customer.getDev_id();
		//先查询再删除
		Customer c=customerService.findOne(dev_id);
		customerService.delete(c);
		return "delete";
		
	}
	public String showCustomer(){
		int dev_id=customer.getDev_id();
		Customer c=customerService.findOne(dev_id);
		ServletActionContext.getRequest().setAttribute("customer",c);
		return "showCustomer";
	}
	public String update(){
		customerService.update(customer);
		return "update";
		
	}
	public String listPage(){
		PageBean pageBean=customerService.listPage(currentPage);
		ServletActionContext.getRequest().setAttribute("pageBean", pageBean);
		return "listPage";
		
	}
	public Integer getCurrentPage() {
		return currentPage;
	}
	public void setCurrentPage(Integer currentPage) {
		this.currentPage = currentPage;
	}
	public String conditionQuery(){
		if(customer.getMuMac()!=null&&!"".equals(customer.getMuMac()))
		{
			List<Customer> list=customerService.findCondition(customer);
			ServletActionContext.getRequest().setAttribute("list", list);
		}
		else{
			list();
		}
		return "conditionQuery";
	}
	//单用户位置信息查询
	public String mapQuery(){
		if(customer.getMuMac()!=null&&!"".equals(customer.getMuMac()))
		{
			List<Customer> list=customerService.findCondition(customer);
			ServletActionContext.getRequest().setAttribute("list", list);
			x=list.get(0).getX();
			y=list.get(0).getY();
			absx=1.004614916617*Math.sin(0.0001577329)*x+1.004614916617*Math.cos(0.0001577329)*y+5081797.342644;
					
			absy=1.004614916617*Math.cos(0.0001577329)*x-1.004614916617*Math.sin(0.0001577329)*y+538015.238729;
			//System.out.println(absx+absy);
			xy2BL bl=new xy2BL(absx, absy, 126);
			latitude=bl.getB();
			longitude=bl.getL();
			System.out.println(latitude);
			System.out.println(longitude);
			ServletActionContext.getRequest().setAttribute("longitude", longitude);
			ServletActionContext.getRequest().setAttribute("latitude", latitude);
			
		}
		else{
			list();
		}
		return "heatMap";
	}
	//单用户轨迹查询
	public String traceMap() throws Exception{
		if(customer.getMuMac()!=null&&!"".equals(customer.getMuMac()))
		{
			List<Customer> list=customerService.findCondition(customer);
			StringBuilder resultBuilder = new StringBuilder("{").append("\"type\": \"Feature\",")
					.append("\"geometry\": {").append("\"type\": \"LineString\",").append("\"coordinates\":[");
			StringBuilder recordBuilder = new StringBuilder();
			ServletActionContext.getRequest().setAttribute("list", list);
			System.out.println(list.size());
			List<Double> X=new ArrayList<Double>();
			List<Double> Y=new ArrayList<Double>();
			List<Double> longitudelist=new ArrayList<Double>();
			List<Double> latitudelist=new ArrayList<Double>();
			for(int i=0;i<list.size();i++)
			{
				X.add(list.get(i).getX());
				Y.add(list.get(i).getY());
				absx=1.004614916617*Math.sin(0.0001577329)*list.get(i).getX()+1.004614916617*Math.cos(0.0001577329)*list.get(i).getY()+5081797.342644;
				
				absy=1.004614916617*Math.cos(0.0001577329)*list.get(i).getX()-1.004614916617*Math.sin(0.0001577329)*list.get(i).getY()+538015.238729;
				//System.out.println(absx+absy);
				xy2BL bl=new xy2BL(absx, absy, 126);
				latitude=bl.getB();
				longitude=bl.getL();
				longitudelist.add(longitude);
				latitudelist.add(latitude);
			}
			ServletActionContext.getRequest().setAttribute("latitudelist", latitudelist);
			ServletActionContext.getRequest().setAttribute("longitudelist", longitudelist);
			
			for(int i=0;i<list.size();i++)
			{
				System.out.println(latitudelist.get(i));
				System.out.println(longitudelist.get(i));
				recordBuilder.append("[").append(longitudelist.get(i)).append(",").append(latitudelist.get(i)).append("],");
			}
			recordBuilder.setLength(recordBuilder.length()-1);
			resultBuilder.append(recordBuilder).append("]}}");
			String jsonString=resultBuilder.toString();
			System.out.println(jsonString);
			Writer w=new FileWriter("C:\\Users\\lenovo\\Desktop\\hlj\\WebRoot\\geojson\\tracemap2.geojson");
			BufferedWriter bw=new BufferedWriter(w);
			bw.write(jsonString);
			bw.close();
		}
		else{
			list();
		}
		return "traceMap";
	}
	
	public String customerJson() throws IOException{
		
		List<Customer> list=customerService.findAll();
		String json=JSON.toJSONString(list);
		HttpServletResponse response=ServletActionContext.getResponse();
		response.getWriter().write(json);
		return NONE;
	}
	public String showMap(){
		return "showMap";
	}
	public String heatMap(){
		return "heatMap";
	}
	public String heatMap2() throws IOException{
		List<Customer> list=customerService.findAll();
		StringBuilder resultBuilder = new StringBuilder("{").append("\"type\": \"FeatureCollection\",")
				.append("\"features\": [");
		StringBuilder recordBuilder = new StringBuilder();
		for(int i=0;i<list.size();i++)
		{
			Double X=list.get(i).getX();
			Double Y=list.get(i).getY();
			absx=1.004614916617*Math.sin(0.0001577329)*list.get(i).getX()+1.004614916617*Math.cos(0.0001577329)*list.get(i).getY()+5081797.342644;
			
			absy=1.004614916617*Math.cos(0.0001577329)*list.get(i).getX()-1.004614916617*Math.sin(0.0001577329)*list.get(i).getY()+538015.238729;
			//System.out.println(absx+absy);
			xy2BL bl=new xy2BL(absx, absy, 126);
			latitude=bl.getB();
			longitude=bl.getL();
			recordBuilder.append("{ \"type\": \"Feature\", \"geometry\": { \"type\": \"Point\", \"coordinates\": [ ")
			.append(longitude).append(", ").append(latitude).append(" ] } },");
			
		}
		recordBuilder.setLength(recordBuilder.length() - 1);
		resultBuilder.append(recordBuilder).append("]").append("}");
		String geoString=resultBuilder.toString();
		
		//System.out.println(geoString);
		Writer w=new FileWriter("C:\\Users\\lenovo\\Desktop\\hlj\\WebRoot\\geojson\\earthquakes.geojson");
		BufferedWriter bw=new BufferedWriter(w);
		bw.write(geoString);
		bw.close();
		return "heatMap2";
	}
	//实时位置显示
	public void showPositionContinue() throws IOException
	{
		try {
			while(true)
			{
				Thread.sleep(1000);
				this.showPosition();
			}
				
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	public String showPosition() throws IOException{
		String url = "http://27.115.0.198:8188/qpe/getTagPosition?version=2";
		int i,j=0;
			while(true)  
	        {
	        	try {
					Thread.sleep(10);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
	
	        	String json = loadJSON(url);
	        	JSONObject obj = JSONObject.fromObject(json);
	            JSONArray tags=obj.getJSONArray("tags");
	            JSONObject[] arr=new JSONObject[tags.size()];
	            JSONArray[] locationarr=new JSONArray[tags.size()];
	            String[] id=new String[tags.size()];
	            Long[] recvtime=new Long[tags.size()];
	            String[] times=new String[tags.size()];
	            Double[] accuracy=new Double[tags.size()];
	            Double[] x=new Double[tags.size()];
	            Double[] y=new Double[tags.size()];
	            Double[] z=new Double[tags.size()];
	            Double[] absx=new Double[tags.size()];
	            Double[] absy=new Double[tags.size()];
	            Double[] absz=new Double[tags.size()];
	            Double[] latitude=new Double[tags.size()];
	            Double[] longitude=new Double[tags.size()];
	            String[] floor=new String[tags.size()];
	        	/*for(i=0;i<tags.size();i++){
	                arr[i]=tags.getJSONObject(i);
	               System.out.println(arr[i]);
	               
	          }*/
	           for(i=0;i<tags.size();i++){
	           id[i]=arr[i].getString("id");
	           recvtime[i]=arr[i].getLong("positionTS");
	           SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");  
			   times[i] = format.format(recvtime[i]);
	           accuracy[i]=arr[i].getDouble("positionAccuracy");
	           floor[i]=arr[i].getString("coordinateSystemName");
	           locationarr[i]=arr[i].getJSONArray("position");
	           x[i]=locationarr[i].getDouble(0);        
	           y[i]=locationarr[i].getDouble(1);
	           z[i]=locationarr[i].getDouble(2);
	           absx[i]=1.004614916617*Math.sin(0.0001577329)*x[i]+1.004614916617*Math.cos(0.0001577329)*y[i]+5081797.342644;
	           absy[i]=1.004614916617*Math.cos(0.0001577329)*x[i]-1.004614916617*Math.sin(0.0001577329)*y[i]+538015.238729;
	           absz[i]=1.0;
	           xy2BL bl=new xy2BL(absx[i], absy[i], 126.0);
			   latitude[i]=bl.getB();
			   longitude[i]=bl.getL();
			   ServletActionContext.getRequest().setAttribute("longitude", longitude[i]);
			   ServletActionContext.getRequest().setAttribute("latitude", latitude[i]);
	           }
	          //System.out.println(5);
			return "showPosition";
			
		}
	
			
	}	
	public CGCS2000Point getcPoint() {
		return cPoint;
	}
	public void setcPoint(CGCS2000Point cPoint) {
		this.cPoint = cPoint;
	}
	public MPoint getmPoint() {
		return mPoint;
	}
	public void setmPoint(MPoint mPoint) {
		this.mPoint = mPoint;
	}
	public Double getX() {
		return x;
	}
	public void setX(Double x) {
		this.x = x;
	}
	public Double getAbsy() {
		return absy;
	}
	public void setAbsy(Double absy) {
		this.absy = absy;
	}
	public Double getAbsx() {
		return absx;
	}
	public void setAbsx(Double absx) {
		this.absx = absx;
	}
	public static String loadJSON (String url) {
         StringBuilder jsonString = new StringBuilder();
         try {
             URL oracle = new URL(url);
             URLConnection yc = oracle.openConnection();
             BufferedReader in = new BufferedReader(new InputStreamReader(
                                         yc.getInputStream()));
             String inputLine = null;
             while ( (inputLine = in.readLine()) != null) {
                 jsonString.append(inputLine);
             }
             in.close();
         } catch (MalformedURLException e) {
         } catch (IOException e) {
         }
         return jsonString.toString();
     }   

}
